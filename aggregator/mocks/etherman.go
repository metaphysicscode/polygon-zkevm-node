// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygonHermez/zkevm-node/etherman/types"
)

// etherman is an autogenerated mock type for the etherman type
type etherman struct {
	mock.Mock
}

// BuildProofHashTxData provides a mock function with given fields: lastVerifiedBatch, newVerifiedBatch, proofHash
func (_m *etherman) BuildProofHashTxData(lastVerifiedBatch uint64, newVerifiedBatch uint64, proofHash common.Hash) (*common.Address, []byte, error) {
	ret := _m.Called(lastVerifiedBatch, newVerifiedBatch, proofHash)

	var r0 *common.Address
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash) (*common.Address, []byte, error)); ok {
		return rf(lastVerifiedBatch, newVerifiedBatch, proofHash)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, common.Hash) *common.Address); ok {
		r0 = rf(lastVerifiedBatch, newVerifiedBatch, proofHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, common.Hash) []byte); ok {
		r1 = rf(lastVerifiedBatch, newVerifiedBatch, proofHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64, uint64, common.Hash) error); ok {
		r2 = rf(lastVerifiedBatch, newVerifiedBatch, proofHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildTrustedVerifyBatchesTxData provides a mock function with given fields: lastVerifiedBatch, newVerifiedBatch, inputs
func (_m *etherman) BuildTrustedVerifyBatchesTxData(lastVerifiedBatch uint64, newVerifiedBatch uint64, inputs *types.FinalProofInputs) (*common.Address, []byte, error) {
	ret := _m.Called(lastVerifiedBatch, newVerifiedBatch, inputs)

	var r0 *common.Address
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, *types.FinalProofInputs) (*common.Address, []byte, error)); ok {
		return rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, *types.FinalProofInputs) *common.Address); ok {
		r0 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, *types.FinalProofInputs) []byte); ok {
		r1 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64, uint64, *types.FinalProofInputs) error); ok {
		r2 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildUnTrustedVerifyBatchesTxData provides a mock function with given fields: lastVerifiedBatch, newVerifiedBatch, inputs
func (_m *etherman) BuildUnTrustedVerifyBatchesTxData(lastVerifiedBatch uint64, newVerifiedBatch uint64, inputs *types.FinalProofInputs) (*common.Address, []byte, error) {
	ret := _m.Called(lastVerifiedBatch, newVerifiedBatch, inputs)

	var r0 *common.Address
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, *types.FinalProofInputs) (*common.Address, []byte, error)); ok {
		return rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, *types.FinalProofInputs) *common.Address); ok {
		r0 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, *types.FinalProofInputs) []byte); ok {
		r1 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64, uint64, *types.FinalProofInputs) error); ok {
		r2 = rf(lastVerifiedBatch, newVerifiedBatch, inputs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestBlockNumber provides a mock function with given fields: ctx
func (_m *etherman) GetLatestBlockNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestVerifiedBatchNum provides a mock function with given fields:
func (_m *etherman) GetLatestVerifiedBatchNum() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProofCommitEpoch provides a mock function with given fields:
func (_m *etherman) GetProofCommitEpoch() (uint8, error) {
	ret := _m.Called()

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint8, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProofHashCommitEpoch provides a mock function with given fields:
func (_m *etherman) GetProofHashCommitEpoch() (uint8, error) {
	ret := _m.Called()

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint8, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSequencedBatch provides a mock function with given fields: finalBatchNum
func (_m *etherman) GetSequencedBatch(finalBatchNum uint64) (uint64, error) {
	ret := _m.Called(finalBatchNum)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(finalBatchNum)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(finalBatchNum)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(finalBatchNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JudgeAggregatorDeposit provides a mock function with given fields: account
func (_m *etherman) JudgeAggregatorDeposit(account common.Address) (bool, error) {
	ret := _m.Called(account)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (bool, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewEtherman interface {
	mock.TestingT
	Cleanup(func())
}

// newEtherman creates a new instance of etherman. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEtherman(t mockConstructorTestingTnewEtherman) *etherman {
	mock := &etherman{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
